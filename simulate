#!/bin/bash

# ALP Anarchy CAST Simulation Script
# Compiles and runs the C++ simulation pipeline, displaying constants and configuration

echo "ALP Anarchy CAST Simulation Pipeline"
echo "Date and Time: $(date)"
echo "-----------------------------------"

# Check for constants.dat
if [ ! -f "config/constants.dat" ]; then
    echo "Diagnostic: config/constants.dat not found!"
    exit 1
fi
echo "Diagnostic: config/constants.dat found"

# Parse constants.dat and display in a table
echo "Configuration Details:"
echo "+-----------------------------------+-----------------------+----------------------+"
echo "| Parameter                         | Value                 | Units                |"
echo "+-----------------------------------+-----------------------+----------------------+"
while IFS='=' read -r key value; do
    if [[ $key =~ ^[[:space:]]*# || $key =~ ^[[:space:]]*------- || $key =~ ^[[:space:]]*$ || $key == "[Constants]" ]]; then
        continue
    fi
    key=$(echo "$key" | xargs)
    value_full=$(echo "$value" | xargs)
    value=$(echo "$value_full" | cut -d':' -f1 | xargs)
    units=$(echo "$value_full" | cut -d':' -f2- | cut -d',' -f2- | xargs)
    if [ -z "$units" ]; then
        units="No units"
    fi
    printf "| %-33s | %-21s | %-20s |\n" "$key" "$value" "$units"
done < config/constants.dat
echo "+-----------------------------------+-----------------------+----------------------+"
echo "Data Generation Resolution:"
g_e_points=$(echo "$(grep '^G_E_POINTS_PER_DECADE' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs) * ($(grep '^G_E_LOG_MAX' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs) - $(grep '^G_E_LOG_MIN' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs))" | bc)
g_gamma_points=$(echo "$(grep '^G_GAMMA_POINTS_PER_DECADE' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs) * ($(grep '^G_GAMMA_LOG_MAX' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs) - $(grep '^G_GAMMA_LOG_MIN' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs))" | bc)
max_n=$(grep '^MAX_N' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs)
echo "- Figure 2: $g_e_points g_e points"
echo "           $g_gamma_points g_gamma points"
echo "- Figure 3: 300 g_gamma points per N (2 to $max_n)"
echo "-----------------------------------"

# Compile C++ code
echo "Compiling C++ simulation..."
g++ -std=c++17 -Iinclude_cpp -I/home/rik/Cpp_Libraries/eigen-master/ -fopenmp src_cpp/*.cpp simulations/main.cpp -o simulations/simulate
if [ $? -ne 0 ]; then
    echo "Diagnostic: Compilation failed!"
    exit 1
fi
echo "Diagnostic: Compilation successful"

# Run simulation
echo "Running simulation..."
./simulations/simulate
if [ $? -ne 0 ]; then
    echo "Diagnostic: Simulation failed!"
    exit 1
fi
echo "Diagnostic: Simulation completed"
data_dir=$(grep '^DATA_DIR' config/constants.dat | cut -d'=' -f2 | cut -d':' -f1 | xargs)
echo "Simulation data is stored in this directory: $data_dir"
echo "Now run ./plot"

# Summarize output files
echo -e "\nOutput Files Summary:"
echo "+------------------------------------+--------+"
echo "| File                               | Status |"
echo "+------------------------------------+--------+"
for file in data/*.txt; do
    if [ -f "$file" ]; then
        printf "| %-34s | %-6s |\n" "$(basename $file)" "Found"
    else
        printf "| %-34s | %-6s |\n" "$(basename $file)" "Missing"
    fi
done
echo "+------------------------------------+--------+"
